@model IPageableViewModel

@{
    if (Model == null || (Model.CurrentPage == 1 && Model.PageCount <= 1))
    {
        return;
    }

    var linkedPages = new HashSet<int>();

    linkedPages.Add(1);
    linkedPages.Add(Model.PageCount);
    linkedPages.Add(Model.CurrentPage);
    linkedPages.Add(Model.CurrentPage-1);
    linkedPages.Add(Model.CurrentPage-2);
    linkedPages.Add(Model.CurrentPage+1);
    linkedPages.Add(Model.CurrentPage+2);

    var isDisabled = (int i) => {
        return (i == Model.CurrentPage || i < 1 || i > Model.PageCount) ? "disabled" : "";
    };

    var prev = Model.CurrentPage - 1;
    var next = Model.CurrentPage + 1;
}

<nav aria-label="paging navigation">
    <ul class="pagination justify-content-center">
        
        <li class="page-item @(isDisabled(prev))">
            <a class="page-link" href='@Url.LinkToParamater("page", prev.ToString())' aria-label="previous">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>

        @foreach (int pageNumber in linkedPages.Where(x => x > 0 && x <= Model.PageCount).OrderBy(x => x))
        {
            <li class="page-item @(isDisabled(pageNumber))">
                <a class="page-link" aria-label="page @pageNumber" href='@Url.LinkToParamater("page", pageNumber.ToString())'>@pageNumber</a>
            </li>
        }
        
        <li class="page-item @(isDisabled(next))">
            <a class="page-link" href='@Url.LinkToParamater("page", next.ToString())' aria-label="next">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
</nav>