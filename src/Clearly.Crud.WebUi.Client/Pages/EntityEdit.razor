@page "/entity/{entityName}/edit/{id}"

@using Clearly.Crud.WebUi.Client.Models.Dto
@using Clearly.Crud.WebUi.Client.Services
@using Clearly.Crud.WebUi.Client.Shared.EditorComponents
@using Clearly.Crud.WebUi.ViewModels
@using Clearly.Crud

@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

@inject HttpClient http
@inject IEntityApiService service;
@inject IEntityDefinitionFactory entityDefinitionFactory;

<PageTitle>CRUD Admin</PageTitle>

@if (@EntityDefinition != null)
{
    <h1><span class="text-muted small">Edit </span> @EntityDefinition.DisplayName</h1>
    <form class="default-focus" data-type="edit">
    @*<form class="default-focus" data-source="@EntityDefinition.DataSourceUrl" data-type="edit">*@
        @foreach (var field in EntityDefinition.Fields)
        {
            var feature = field.Features[nameof(CrudAdminFieldFeature)].ToObject<CrudAdminFieldFeature>();

            <div class='form-field @(feature.DisplayInEditor ? string.Empty : "hidden")'>
                <DynamicComponent Type="GetComponentType(nameof(InputEditorComponent))" Parameters="GetParamaters(Entity.GetValue(field.NameKey))"></DynamicComponent>
            </div>
        }
        <button type="submit" class="btn btn-primary">Save</button>
    </form>
}

@code {
    [Parameter]
    public string EntityName { get; set; } = string.Empty;

    [Parameter]
    public Guid Id { get; set; } = Guid.Empty;

    protected EntityDefinitionDto EntityDefinition { get; set; } = new EntityDefinitionDto();

    public JObject Entity { get; set; }

    public Dictionary<string, object> GetParamaters(JToken property)
    {
        return new Dictionary<string, object> { { "Input", property } };
    }

    protected Type GetComponentType(string type)
    {
        return this.GetType().Assembly.GetTypes().FirstOrDefault(x => x.Name == type);
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await http.GetAsync($"/api/entity/{EntityName}");

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();

            if (string.IsNullOrWhiteSpace(json))
            {
                throw new Exception();
            }

            EntityDefinition = JsonConvert.DeserializeObject<EntityDefinitionDto>(json);

            Entity = await service.GetById(Id, EntityDefinition.NameKey);
        }
        else
        {
            // TODO: Handle error
        }
    }
}