@page "/entity/{entityName}/edit/{id}"

@*TODO: Merge this and EntityCreate.razor to remove code duplication*@

@using Clearly.Crud.WebUi.Client.Models.Dto
@using Clearly.Crud.WebUi.Client.Services
@using Clearly.Crud

@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Text

@inject HttpClient http
@inject IEntityApiService service;
@inject NavigationManager navigationManager

<PageTitle>CRUD Admin</PageTitle>

@if (@EntityDefinition != null)
{
    <h1><span class="text-muted small">Edit </span> @EntityDefinition.DisplayName</h1>
    <EditForm class="default-focus" data-type="edit" Model="Entity" OnValidSubmit="@OnSubmit">
        @foreach (var field in EntityDefinition.Fields)
        {
            var feature = field.Features[nameof(CrudAdminPropertyFeature)].ToObject<CrudAdminPropertyFeature>();

            @if (feature.DisplayInEditor)
            {
                <div class='form-field'>
                    <DynamicComponent Type="GetComponentType(feature.EditorComponentName)" Parameters="GetParamaters(field)"></DynamicComponent>
                </div>
            }
        }
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    [Parameter]
    public string EntityName { get; set; } = string.Empty;

    [Parameter]
    public string Id { get; set; } = Guid.Empty.ToString();

    protected EntityDefinitionDto EntityDefinition { get; set; } = new EntityDefinitionDto();

    public JObject Entity { get; set; } = new JObject();

    public Dictionary<string, object> GetParamaters(FieldDefinitionDto fieldDefinition)
    {
        var key = fieldDefinition.NameKey.ToCamelCase();
        var property = Entity.Property(key);

        if (property == null)
        {
            property = new JProperty(key, JValue.CreateNull());
            Entity.Add(property);
        }

        return new Dictionary<string, object>
        {
            { "Input", property },
            { "PropertyDefinitionNode", fieldDefinition },
        };
    }

    protected Type GetComponentType(string type)
    {
        var componentType = this.GetType().Assembly.GetTypes().FirstOrDefault(x => x.Name == type);

        if (componentType == null)
        {
            throw new InvalidOperationException($"Cannot create component {type} because it does not exist.");
        }

        return componentType;
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await http.GetAsync($"/api/entity/{EntityName}");

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();

            if (string.IsNullOrWhiteSpace(json))
            {
                throw new Exception();
            }

            EntityDefinition = JsonConvert.DeserializeObject<EntityDefinitionDto>(json);

            // TODO: Figure out how to do a Guid route param or make this Parse less error prone
            Entity = await service.GetById(Guid.Parse(Id), EntityDefinition.NameKey);
        }
        else
        {
            // TODO: Handle error
        }
    }

    protected async void OnSubmit()
    {
        // TODO: Processing Indicator

        var json = JsonConvert.SerializeObject(Entity);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await http.PutAsync($"/api/{EntityName}/{Id}", content);

        if (response.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo($"/admin/entity/{EntityName}");
        }
        else
        {
            // TODO: Display Error
        }
    }
}