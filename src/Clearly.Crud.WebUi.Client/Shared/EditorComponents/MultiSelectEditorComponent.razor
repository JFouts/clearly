@using Clearly.Crud.WebUi.Client.Models.Dto
@using Clearly.Crud.WebUi.Client.Shared.DisplayComponents
@using Clearly.Crud.WebUi
@using Clearly.Crud.WebUi.Core
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

@inherits BaseDisplayComponent

@inject IDataSourceFactory dataSourceFactory
@inject IDataSourceReader<KeyValuePair<string, string>> dataSourceReader;

<div class="mb-3">
  <label for="@PropertyDefinitionNode.NameKey">@PropertyDefinitionNode.DisplayName</label>
  <select class="form-select" id="@PropertyDefinitionNode.NameKey" name="@PropertyDefinitionNode.NameKey" @bind="Value" multiple>
    @foreach (var option in Options)
    {
      <option value="@option.Value">@option.Label</option>  
    }
  </select> 
</div>

@code
{
    protected string[] Value
    {
        get
        {
            if (Input.Value.Type == JTokenType.Array)
            {
                return Input.Value.ToObject<string[]>();
            }

            return Array.Empty<string>();
        }

        set
        {
            Input.Value = JArray.FromObject(value);
        }
    }

    protected CrudAdminDropDownFeature Configuration { get; set; } = new CrudAdminDropDownFeature();

    protected IEnumerable<MultiSelectOption> Options { get; set; } = Array.Empty<MultiSelectOption>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Configuration = PropertyDefinitionNode.Features[nameof(CrudAdminDropDownFeature)].ToObject<CrudAdminDropDownFeature>();

        var dataSource = dataSourceFactory.Create(Configuration.DataSourceType, Configuration.DataSource);
        var data = await dataSourceReader.ReadFrom(dataSource);

        Options = data.Select(x => new MultiSelectOption
        {
            Value = x.Key,
            Label = x.Value,
        });
    }

    protected class MultiSelectOption
    {
        public string Value { get; set; } = string.Empty;
        public string Label { get; set; } = string.Empty;
    }
}